@page "/pedido"
@page "/pedido/{PedidoId:int}"
@using Microsoft.AspNetCore.Authorization
@using Shared.Models
@attribute [Authorize]
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject PedidoServices pedidoServices


<div class="card">
    <div class="card-header">
        <h3>Pedidos</h3>
        <a href="/pedidoCreate" class="btn btn-outline-primary bi bi-plus-square">  Crear</a>
    </div>

    <div class="card-body">

        <div class="input-group-text">

            <label class="form-control-label col-1">Desde:</label>
            <div class="col-3">
                <input class="form-control" type="date" @bind="Desde" />
            </div>

            <label class="form-control-label col-1">Hasta:</label>
            <div class="col-3">
                <input class="form-control" type="date" @bind="Hasta" />
            </div>

            <div class="col-5">
                <button type="button" @onclick="Buscar" class="btn btn-primary  ">
                    <i class="bi bi-search" />
                    <br /> Buscar
                </button>
            </div>

        </div>

        <div class="row">
            <div class="col-3">
                <label>Filtrar Por</label>
                <InputSelect @bind-Value="Opcion" class="form-select">
                    <option value="0" selected disabled>Seleccione</option>
                    <option value="1">PedidoId</option>
                   
                </InputSelect>
            </div>

            @if (Opcion == 1)
            {
                <div class="col-3">
                    <label>ID</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="PedidoId" class="form-control"></InputNumber>
                    </div>
                </div>
            }

      

        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th scope="col" class="text-center">PedidoId</th>
                    <th scope="col" class="text-center">Fecha del Pedido</th>
                    <th scope="col" class="text-center">Direcci&oacute;n</th>
                    <th scope="col" class="text-center">Estado</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in listaPedido)
                {
                    <tr>
                        <td class="text-center">@item.PedidoId</td>
                        <td class="text-center">@item.Fecha_Pedido.ToShortDateString()</td>
                        <td class="text-center">@item.Direccion</td>
                        <td class="text-center">@item.Estado</td>

                        <td>
                            <a href="/deletePedido/@item.PedidoId" class="btn btn-danger bi bi-trash-fill">Borrar</a>
                            <a href="/pedidoEdit/@item.PedidoId" class="btn btn-primary bi-box-arrow-up-right">Editar</a>
                            <a href="/detailsPedido/@item.PedidoId" class="btn btn-success bi-box-arrow-up-right">Detalles</a>

                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
    <div class="card-footer">
        <a href="/" class="btn btn-outline-danger bi bi-house-door-fill"> Volver</a>
    </div>
</div>

@code {
    [Parameter]
    public int PedidoId { get; set; }
    public Pedido pedido { get; set; } = new Pedido();
    public List<Pedido> listaPedido { get; set; } = new List<Pedido>();
   
    public int Opcion = 0;
    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listaPedido = await pedidoServices.Listar(t => true);
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
    }

    public async Task Buscar()
    {
        Hasta = new DateTime(Hasta.Year, Hasta.Month, Hasta.Day, 23, 59, 59);
        if (Opcion == 0)
        {
            listaPedido = await pedidoServices.Listar(t => t.Fecha_Pedido >= Desde && t.Fecha_Pedido <= Hasta);
        }
        if (Opcion == 1)
        {
            if (PedidoId <= 0)
                listaPedido = await pedidoServices.Listar(t => true);
            else
                listaPedido = await pedidoServices.Listar(t => t.PedidoId == PedidoId && t.Fecha_Pedido >= Desde && t.Fecha_Pedido <= Hasta);
        }
      
    }
}
