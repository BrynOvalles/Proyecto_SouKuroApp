@page "/informe"
@page "/informe/{InformeId:int}"
@using Microsoft.AspNetCore.Authorization
@using Shared.Models
@attribute [Authorize(Roles ="Admin")]
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject InformeServices informeservice


<div class="card">
    <div class="card-header">
        <h3>Informe</h3>
    </div>

    <div class="card-body">

        <div class="input-group-text">

            <label class="form-control-label col-1">Desde:</label>
            <div class="col-3">
                <input class="form-control" type="date" @bind="Desde" />
            </div>

            <label class="form-control-label col-1">Hasta:</label>
            <div class="col-3">
                <input class="form-control" type="date" @bind="Hasta" />
            </div>

            <div class="col-5">
                <button type="button" @onclick="Buscar" class="btn btn-primary  ">
                    <i class="bi bi-search" />
                    <br /> Buscar
                </button>
            </div>

        </div>

        <div class="row">
            <div class="col-3">
                <label>Filtrar Por</label>
                <InputSelect @bind-Value="Opcion" class="form-select">
                    <option value="0" selected disabled>Seleccione</option>
                    <option value="1">InformeId</option>
                    <option value="2">Gastado</option>
                </InputSelect>
            </div>

            @if (Opcion == 1)
            {
                <div class="col-3">
                    <label>ID</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="InformeId" class="form-control"></InputNumber>
                    </div>
                </div>
            }

            @if (Opcion == 2)
            {
                <div class="col-3">
                    <label>Gastado</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Gastado" class="form-control"></InputNumber>
                    </div>
                </div>
            }

        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th scope="col" class="text-center">InformeId</th>
                    <th scope="col" class="text-center">Fecha de Inicio</th>
                    <th scope="col" class="text-center">Fecha Final</th>
                    <th scope="col" class="text-center">Total de Compras</th>
                    <th scope="col" class="text-center">Gastado</th>

                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in ListaCompra)
                {
                    <tr>
                        <td class="text-center">@item.PedidoClienteId</td>
                        <td class="text-center">@item.Num_Mesa.ToString("N2")</td>

                        <td>
                            <a href="/deleteInforme/@item.PedidoClienteId" class="btn btn-danger bi bi-trash-fill">Delete</a>
                            <a href="/informeEdit/@item.PedidoClienteId class="btn btn-primary bi-box-arrow-up-right">Edit</a>
                            <a href="/detailsInforme/@item.PedidoClienteId" class="btn btn-success bi-box-arrow-up-right">Detalles</a>

                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
    <div class="card-footer">
        <a href="/" class="btn btn-outline-danger bi bi-house-door-fill"> Volver</a>
    </div>
</div>

@code {
    [Parameter]
    public int InformeId { get; set; }
    public Informe informe { get; set; } = new Informe();
    public List<Informe> ListaInforme { get; set; } = new List<Informe>();
    public List<Centro_de_Pedidos> ListaCompra { get; set; } = new List<Centro_de_Pedidos>();

    public int Opcion = 0;

    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }
    public int Gastado { get; set; }



    protected override async Task OnInitializedAsync()
    {

        ListaInforme = await informeservice.Listar(t => true);
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
    }

    public async Task Buscar()
    {
        Hasta = new DateTime(Hasta.Year, Hasta.Month, Hasta.Day, 23, 59, 59);
        if (Opcion == 0)
        {
            ListaInforme = await informeservice.Listar(t => t.Fecha_Inicio >= Desde && t.Fecha_Inicio <= Hasta);
        }
        if (Opcion == 1)
        {
            if (InformeId <= 0)
                ListaInforme = await informeservice.Listar(t => true);
            else
                ListaInforme = await informeservice.Listar(t => t.InformeId == InformeId && t.Fecha_Inicio >= Desde && t.Fecha_Inicio <= Hasta);
        }
        if (Opcion == 2)
        {
            if (InformeId <= 0)
                ListaInforme = await informeservice.Listar(t => true);
            else
                ListaInforme = await informeservice.Listar(t => t.Gastado == Gastado && t.Fecha_Inicio >= Desde && t.Fecha_Inicio <= Hasta);
        }
}
}