@page "/compras/create"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject CompraServices compraservice
@using Shared.Models;

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Compra</h4>
<hr />
@*<div class="row">
    <div class="col-md-4">*@
        <EditForm  Model="compra" OnValidSubmit="Guardar" >
           <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Editar Compra </h1>
        </div>
        <div class=" card-body">
            <label>CompraId</label>

            <div class="input-group">
                <InputNumber min="0" @bind-Value="compra.CompraId" class="id-input"></InputNumber>
            </div>
            <div>
                <label>Fecha de compra:</label>
                <InputDate @bind-Value="compra.Fecha_Compra" class="form-control"></InputDate>
                <ValidationMessage For="@(() => compra.Fecha_Compra)" />
            </div>

            <div>
                <label>NFC:</label>
                <InputText @bind-Value="compra.NFC" class="form-control"></InputText>
                <ValidationMessage For="@(() => compra.NFC)" />
            </div>
            <div>
                <label>NO_Compra:</label>
                <InputNumber @bind-Value="compra.No_Compra" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => compra.No_Compra)" />
            </div>
            <div>
                <label>Telefono:</label>
                <InputText @bind-Value="compra.Telefono" class="form-control" readonly></InputText>
                <ValidationMessage For="@(() => compra.Telefono)" />
            </div>
            <div>
                <label>Cantidad:</label>
                <InputNumber @bind-Value="compra.Cantidad" class="form-control" readonly></InputNumber>
                <ValidationMessage For="@(() => compra.Cantidad)" />
            </div>
            <div>
                <label>SubTotal:</label>
                <InputNumber @bind-Value="compra.SubTotal" class="form-control" ></InputNumber>
                <ValidationMessage For="@(() => compra.SubTotal)" />
            </div>
            <div>
                <label>ITEBIS:</label>
                <InputNumber @bind-Value="compra.ITBIS" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => compra.ITBIS)" />
            </div>
            <div>
                <label>Total:</label>
                <InputNumber @bind-Value="compra.Total" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => compra.Total)" />
            </div>
        </div>       
            <button type="submit" class="btn btn-primary">Create</button>

            @*Detalles:*@
            <div class="card card-header mt-5">
                <h3>Detalle de Compra</h3>

                <div class="row">
                    <div class="col">
                        <label class="fw-bold mt-3">CompraId</label>
                        <InputNumber @bind-Value="Detalles.CompraId" class="form-control"></InputNumber>
                        <ValidationMessage For="@(() => Detalles.CompraId)" />
                    </div>
                    <div class="col">
                        <label class="fw-bold mt-3">Nombre del Producto</label>
                        <InputText @bind-Value="Detalles.Nombre_Producto" class="form-control"></InputText>
                        <ValidationMessage For="@(() => Detalles.Nombre_Producto)" />
                    </div>
                    <div class="col">
                        <label class="fw-bold mt-3">Cantidad del Producto</label>
                        <InputNumber @bind-Value="Detalles.Cantidad_Prod" class="form-control"></InputNumber>
                        <ValidationMessage For="@(() => Detalles.Cantidad_Prod)" />
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-center">
                    <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-success">Agregar</button>
                </div>
                <table class='table table-bordered table-hover'>
                    <thead>
                        <tr>

                            <th>Nombre Producto</th>
                            <th>Cantidad</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in listaDetalles)
                        {
                           
                            <tr>

                                <td>@detalle.Nombre_Producto</td>
                                <td>@detalle.Cantidad_Prod</td>
                                <td><button type="button" class="btn btn-outline-danger bi bi-trash-fill" @onclick=@(() => RemoverDetalle(detalle))>Eliminar</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        </EditForm>



<div class="card-footer">
    <a href="/compras" class="btn btn-outline-danger bi bi-house-door-fill"> Volver</a>
    
</div>

@code {

    [Parameter]
    public int CompraId { get; set; }
    public Compra compra { get; set; } = new Compra();
    public string Mensaje = " ";
    public Compras_Detalles Detalles { get; set; } = new Compras_Detalles();
    public List<Compras_Detalles> listaDetalles = new List<Compras_Detalles>();


    protected override async Task OnInitializedAsync()
    {
        if (CompraId > 0)
        {
            this.compra = await compraservice.GetCompras(CompraId);
            if (this.compra != null)
            {
                await this.Buscar();
            }
            else
            {
                Navigation.NavigateTo("/Error");
            }
        }

        compra.Fecha_Compra = DateTime.Now;

        // Inicializar los detalles de la compra si es necesario
        if (compra.Detalle == null)
        {
            compra.Detalle = new List<Compras_Detalles>();
        }
    }


    public async Task Buscar()
    {
        var compraEncontrado = await compraservice.Buscar(compra.CompraId);

        if (compraEncontrado != null)
        {
            this.compra = compraEncontrado;
        }
    }
    public async Task Guardar()
    {
        var guardo = await compraservice.Guardar(compra);
        if (guardo)
        {

            await Task.Delay(3000);
            Atras();
        }

    }
    void Atras()
    {
        Navigation.NavigateTo("/compras");
    }

    public async Task AgregarDetalle()
    {
        if (compra != null)
        {

            Detalles.CompraId = compra.CompraId;
            compra.Cantidad += Detalles.Cantidad_Prod;
            listaDetalles.Add(Detalles);
            compra.Detalle.Add(Detalles);
            // Detalles = new Vehiculos_Detalle();
        }
    }

    public async Task RemoverDetalle(Compras_Detalles details)
    {


        Detalles = details;
        compra.Cantidad -= Detalles.Cantidad_Prod;
        listaDetalles.Remove(details);
    }
}
