@page "/usuarioEdit"
@page "/usuarioEdit/{Id}"
@inject UsuariosServices usuarioservice
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> userManager
@inject ApplicationDbContext context
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Proyecto_SouKuroApp.Data
@using Shared.Models
<PageTitle>Modificar</PageTitle>

<h1>Modificar</h1>

<h4>Usuario</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="Modificar" FormName="usuarioEdit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            
            <div class="mb-3">
                <label for="NombreUsuario" class="form-label">Email:</label>
                <InputText id="NombreUsuario" @bind-Value="User.UserName" class="form-control" />
                <ValidationMessage For="() => User.UserName" class="text-danger" />
            </div>
    
            <div class="card-footer">
                <a href="/usuario" class="btn btn-outline-danger bi bi-house-door-fill"> Volver</a>
                <button type="submit" class="btn btn-primary">Modificar</button>
            </div>


        </EditForm>
    </div>
</div>



@code {
    [Parameter]
    public string Id { get; set; }
    public ApplicationUser User { get; set; } = new ApplicationUser();


    protected override async Task OnInitializedAsync()
    {

        if (!Guid.TryParse(Id, out Guid userId))
        {
            // Manejar el caso en que el Id no sea un Guid válido
            // Puedes mostrar un mensaje de error, por ejemplo
            return;
        }

        // Obtener el usuario por su Id
        User = await userManager.FindByIdAsync(userId.ToString());
    }



    public async Task Modificar()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var applicationUser = user.Identity.Name;
        var usuarioActualizar = context.Users.FirstOrDefault(u => u.UserName == applicationUser);
        var guardado = await usuarioservice.Update(usuarioActualizar);
        if (!guardado)
        {
            return;
        }
        else
        {
          
        
            User = new ApplicationUser();
            
        }
    }
    void Atras()
    {
        Navigation.NavigateTo("/usuario");
    }
}
